--- vcdimager-0.7.24/frontends/cli/vcd-info.c.omv~	2017-12-12 18:27:40.337118624 +0100
+++ vcdimager-0.7.24/frontends/cli/vcd-info.c	2017-12-12 18:28:04.215132834 +0100
@@ -928,7 +928,7 @@ _dump_fs_recurse (const vcdinfo_obj_t *o
   CdioListNode_t *entnode;
   CdIo_t *cdio = vcdinfo_get_cd_image(obj);
 
-  entlist = iso9660_fs_readdir (cdio, pathname, true);
+  entlist = iso9660_fs_readdir (cdio, pathname);
     
   fprintf (stdout, " %s:\n", pathname);
 
@@ -971,7 +971,7 @@ _dump_fs_recurse (const vcdinfo_obj_t *o
 
     }
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   fprintf (stdout, "\n");
 
@@ -984,7 +984,7 @@ _dump_fs_recurse (const vcdinfo_obj_t *o
       _dump_fs_recurse (obj, _fullname);
     }
 
-  _cdio_list_free (dirlist, true);
+  _cdio_list_free (dirlist, true, NULL);
 }
 
 static void
--- vcdimager-0.7.24/frontends/xml/vcd_xml_build.c.omv~	2017-12-12 18:28:22.529144070 +0100
+++ vcdimager-0.7.24/frontends/xml/vcd_xml_build.c	2017-12-12 18:28:29.758148582 +0100
@@ -499,10 +499,10 @@ main (int argc, const char *argv[])
 
   xmlFreeDoc (vcd_doc);
   free(gl.xml_fname);
-  _cdio_list_free (gl.img_options, true);
+  _cdio_list_free (gl.img_options, true, NULL);
   return EXIT_SUCCESS;
  err_exit: 
   free(gl.xml_fname);
-  _cdio_list_free (gl.img_options, true);
+  _cdio_list_free (gl.img_options, true, NULL);
   return EXIT_FAILURE;
 }
--- vcdimager-0.7.24/frontends/xml/vcdxml.h.omv~	2017-12-12 18:28:35.297152069 +0100
+++ vcdimager-0.7.24/frontends/xml/vcdxml.h	2017-12-12 18:29:05.878171762 +0100
@@ -151,8 +151,8 @@ vcd_xml_destroy (vcdxml_t *p_vcdxml)
 
   vcd_assert (p_vcdxml != NULL);
 
-  _cdio_list_free (p_vcdxml->option_list,   true);
-  _cdio_list_free (p_vcdxml->segment_list,  true);
+  _cdio_list_free (p_vcdxml->option_list,   true, NULL);
+  _cdio_list_free (p_vcdxml->segment_list,  true, NULL);
 
   _CDIO_LIST_FOREACH (p_node, p_vcdxml->pbc_list)
     {
@@ -172,8 +172,8 @@ vcd_xml_destroy (vcdxml_t *p_vcdxml)
 	  struct entry_point_t *p_entry = _cdio_list_node_data(p_node2);
 	  free(p_entry->id);
 	}
-      _cdio_list_free (p_sequence->entry_point_list, true);
-      _cdio_list_free (p_sequence->autopause_list, true);
+      _cdio_list_free (p_sequence->entry_point_list, true, NULL);
+      _cdio_list_free (p_sequence->autopause_list, true, NULL);
     }
   
   _CDIO_LIST_FOREACH (p_node, p_vcdxml->filesystem)
@@ -183,9 +183,9 @@ vcd_xml_destroy (vcdxml_t *p_vcdxml)
       free(p_fs->file_src);
     }
 
-  _cdio_list_free (p_vcdxml->filesystem,    true);
-  _cdio_list_free (p_vcdxml->pbc_list, true);
-  _cdio_list_free (p_vcdxml->sequence_list, true);
+  _cdio_list_free (p_vcdxml->filesystem,    true, NULL);
+  _cdio_list_free (p_vcdxml->pbc_list, true, NULL);
+  _cdio_list_free (p_vcdxml->sequence_list, true, NULL);
   free (p_vcdxml->comment);
   free (p_vcdxml->info.album_id);
   free (p_vcdxml->pvd.volume_id);
--- vcdimager-0.7.24/frontends/xml/vcd_xml_rip.c.omv~	2017-12-12 18:29:32.073189203 +0100
+++ vcdimager-0.7.24/frontends/xml/vcd_xml_rip.c	2017-12-12 18:30:19.879222305 +0100
@@ -145,7 +145,7 @@ static int
 _parse_isofs_r (vcdxml_t *p_vcdxml, CdIo_t *p_cdio, 
 		const char pathname[])
 { 
-  CdioList_t *entlist = iso9660_fs_readdir (p_cdio, pathname, true);
+  CdioList_t *entlist = iso9660_fs_readdir (p_cdio, pathname);
   CdioListNode_t *entnode;
 
   if (entlist == NULL)
@@ -184,7 +184,7 @@ _parse_isofs_r (vcdxml_t *p_vcdxml, CdIo
       }
     }
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   return 0;
 }
@@ -769,7 +769,7 @@ _visit_lot (pbc_ctx_t *p_pbc_ctx)
       _visit_pbc (p_pbc_ctx, n + 1, tmp, true);
 
   _vcd_list_sort (p_pbc_ctx->offset_list, 
-		  (_cdio_list_cmp_func) vcdinf_lid_t_cmp);
+		  (_cdio_list_cmp_func_t) vcdinf_lid_t_cmp);
 }
 
 static int
@@ -837,7 +837,7 @@ _parse_pbc (vcdxml_t *p_vcdxml, CdIo_t *
   
   if (cdio_read_mode2_sectors (p_cdio, _pbc_ctx.lot, _lot_vcd_sector, false, 
 			       LOT_VCD_SIZE)) {
-    _cdio_list_free (_pbc_ctx.offset_list, true);
+    _cdio_list_free (_pbc_ctx.offset_list, true, NULL);
     free(_pbc_ctx.lot);
     return -1;
   }
@@ -871,7 +871,7 @@ _parse_pbc (vcdxml_t *p_vcdxml, CdIo_t *
     }
 
  free_and_return:
-  _cdio_list_free (_pbc_ctx.offset_list, true);
+  _cdio_list_free (_pbc_ctx.offset_list, true, NULL);
   free(_pbc_ctx.lot);
   free(_pbc_ctx.psd);
   return 0;
--- vcdimager-0.7.24/include/libvcd/info.h.omv~	2017-12-12 18:11:16.678449251 +0100
+++ vcdimager-0.7.24/include/libvcd/info.h	2017-12-12 18:11:24.835462121 +0100
@@ -455,12 +455,12 @@ extern "C" {
   /*!
     Get the VCD info list.
   */
-  CdioList *vcdinfo_get_offset_list(const vcdinfo_obj_t *p_vcdinfo);
+  CdioList_t *vcdinfo_get_offset_list(const vcdinfo_obj_t *p_vcdinfo);
 
   /*!
     Get the VCD info extended offset list.
   */
-  CdioList *vcdinfo_get_offset_x_list(const vcdinfo_obj_t *p_vcdinfo);
+  CdioList_t *vcdinfo_get_offset_x_list(const vcdinfo_obj_t *p_vcdinfo);
 
   /*!
     Get the VCD info offset multiplier.
--- vcdimager-0.7.24/lib/data_structures.c.omv~	2017-12-12 18:19:57.767797247 +0100
+++ vcdimager-0.7.24/lib/data_structures.c	2017-12-12 18:23:15.765882947 +0100
@@ -58,7 +58,7 @@ struct _CdioListNode
 /* impl */
 
 static bool
-_bubble_sort_iteration (CdioList_t *p_list, _cdio_list_cmp_func cmp_func)
+_bubble_sort_iteration (CdioList_t *p_list, _cdio_list_cmp_func_t cmp_func)
 {
   CdioListNode_t **pp_node;
   bool changed = false;
@@ -86,7 +86,7 @@ _bubble_sort_iteration (CdioList_t *p_li
   return changed;
 }
 
-void _vcd_list_sort (CdioList_t *list, _cdio_list_cmp_func cmp_func)
+void _vcd_list_sort (CdioList_t *list, _cdio_list_cmp_func_t cmp_func)
 {
   /* fixme -- this is bubble sort -- worst sorting algo... */
 
@@ -180,7 +180,7 @@ _vcd_tree_node_destroy (VcdTreeNode_t *p
   if (p_node->children)
     {
       vcd_assert (_cdio_list_length (p_node->children) == 0);
-      _cdio_list_free (p_node->children, true);
+      _cdio_list_free (p_node->children, true, NULL);
       p_node->children = NULL;
     }
 
@@ -188,7 +188,7 @@ _vcd_tree_node_destroy (VcdTreeNode_t *p
     free (_vcd_tree_node_set_data (p_node, NULL));
 
   if (p_node->parent)
-    _cdio_list_node_free (p_node->listnode, true);
+    _cdio_list_node_free (p_node->listnode, true, NULL);
   else
     _vcd_tree_node_set_data (p_node, NULL);
 }
@@ -263,7 +263,7 @@ _vcd_tree_node_sort_children (VcdTreeNod
   vcd_assert (p_node != NULL);
 
   if (p_node->children)
-    _vcd_list_sort (p_node->children, (_cdio_list_cmp_func) cmp_func);
+    _vcd_list_sort (p_node->children, (_cdio_list_cmp_func_t) cmp_func);
 }
 
 void
@@ -302,7 +302,7 @@ _vcd_tree_node_traverse_bf (VcdTreeNode_
       VcdTreeNode_t  *treenode = _cdio_list_node_data (lastnode);
       VcdTreeNode_t  *childnode;
 
-      _cdio_list_node_free (lastnode, false);
+      _cdio_list_node_free (lastnode, false, NULL);
 
       trav_func (treenode, p_user_data);
       
@@ -312,7 +312,7 @@ _vcd_tree_node_traverse_bf (VcdTreeNode_
         }
     }
 
-  _cdio_list_free (queue, false);
+  _cdio_list_free (queue, false, NULL);
 }
 
 VcdTreeNode_t *_vcd_tree_node_parent (VcdTreeNode_t *p_node)
--- vcdimager-0.7.24/lib/data_structures.h.omv~	2017-12-12 18:10:06.086333656 +0100
+++ vcdimager-0.7.24/lib/data_structures.h	2017-12-12 18:10:11.203342301 +0100
@@ -28,7 +28,7 @@
 
 CdioListNode_t *_vcd_list_at (CdioList_t *list, int idx);
 
-void _vcd_list_sort (CdioList_t *p_list, _cdio_list_cmp_func cmp_func);
+void _vcd_list_sort (CdioList_t *p_list, _cdio_list_cmp_func_t cmp_func);
 
 /* n-way tree */
 
--- vcdimager-0.7.24/lib/dict.h.omv~	2017-12-12 18:16:31.904677277 +0100
+++ vcdimager-0.7.24/lib/dict.h	2017-12-12 18:17:57.213789077 +0100
@@ -88,7 +88,7 @@ _dict_get_bykey (VcdObj_t *obj, const ch
   vcd_assert (key != NULL);
 
   node = _cdio_list_find (obj->buffer_dict_list,
-			  (_cdio_list_iterfunc) _dict_key_cmp,
+			  (_cdio_list_iterfunc_t) _dict_key_cmp,
 			  (char *) key);
   
   if (node)
@@ -106,7 +106,7 @@ _dict_get_bysector (VcdObj_t *obj, uint3
   vcd_assert (sector != SECTOR_NIL);
 
   node = _cdio_list_find (obj->buffer_dict_list, 
-			  (_cdio_list_iterfunc) _dict_sector_cmp, 
+			  (_cdio_list_iterfunc_t) _dict_sector_cmp, 
 			  &sector);
 
   if (node)
@@ -158,7 +158,7 @@ _dict_clean (VcdObj_t *obj)
       free (p->key);
       free (p->buf);
 
-      _cdio_list_node_free (node, true);
+      _cdio_list_node_free (node, true, NULL);
     }
 }
 
--- vcdimager-0.7.24/lib/files.c.omv~	2017-12-12 18:23:49.536912706 +0100
+++ vcdimager-0.7.24/lib/files.c	2017-12-12 18:24:32.613950883 +0100
@@ -634,7 +634,7 @@ get_search_dat_size (const VcdObj_t *p_v
     + (_get_scanpoint_count (p_vcdobj) * sizeof (msf_t));
 }
 
-static CdioList *
+static CdioList_t *
 _make_track_scantable (const VcdObj_t *p_vcdobj)
 {
   CdioList_t *p_all_aps = _cdio_list_new ();
@@ -712,7 +712,7 @@ _make_track_scantable (const VcdObj_t *p
 
   }
 
-  _cdio_list_free (p_all_aps, true);
+  _cdio_list_free (p_all_aps, true, NULL);
 
   vcd_assert (scanpoints == _cdio_list_length (p_scantable));
 
@@ -754,7 +754,7 @@ set_search_dat (VcdObj_t *p_vcdobj, void
 
   vcd_assert (n = _get_scanpoint_count (p_vcdobj));
 
-  _cdio_list_free (p_scantable, true);
+  _cdio_list_free (p_scantable, true, NULL);
 }
 
 static uint32_t 
--- vcdimager-0.7.24/lib/image_bincue.c.omv~	2017-12-12 18:24:44.096961098 +0100
+++ vcdimager-0.7.24/lib/image_bincue.c	2017-12-12 18:25:00.605975814 +0100
@@ -88,7 +88,7 @@ _sink_free (void *user_data)
 }
 
 static int
-_set_cuesheet (void *user_data, const CdioList *vcd_cue_list)
+_set_cuesheet (void *user_data, const CdioList_t *vcd_cue_list)
 {
   _img_bincue_snk_t *_obj = user_data;
   CdioListNode_t *node;
@@ -102,7 +102,7 @@ _set_cuesheet (void *user_data, const Cd
 
   track_no = 0;
   index_no = 0;
-  _CDIO_LIST_FOREACH (node, (CdioList *) vcd_cue_list)
+  _CDIO_LIST_FOREACH (node, (CdioList_t *) vcd_cue_list)
     {
       const vcd_cue_t *_cue = _cdio_list_node_data (node);
       char *psz_msf;
--- vcdimager-0.7.24/lib/info.c.omv~	2017-12-12 18:11:42.798490129 +0100
+++ vcdimager-0.7.24/lib/info.c	2017-12-12 18:14:48.925300959 +0100
@@ -106,7 +106,7 @@ _init_segments (vcdinfo_obj_t *p_obj)
 
   if (NULL == p_obj->seg_sizes || 0 == num_segments) return;
 
-  entlist = iso9660_fs_readdir(p_obj->img, "SEGMENT", true);
+  entlist = iso9660_fs_readdir(p_obj->img, "SEGMENT");
 
   i=0;
   _CDIO_LIST_FOREACH (entnode, entlist) {
@@ -141,7 +141,7 @@ _init_segments (vcdinfo_obj_t *p_obj)
     vcd_warn ("Number of segments found %d is not number of segments %d", 
               i, num_segments);
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   
 #if 0
@@ -1563,7 +1563,7 @@ vcdinfo_get_volume_id(const vcdinfo_obj_
 {
   static char psz_vol_id[ISO_MAX_VOLUME_ID+1] = {'\0'};
   char *psz_vol_id2;
-  if ( NULL == p_obj || NULL == &p_obj->pvd ) return (NULL);
+  if ( NULL == p_obj ) return (NULL);
   psz_vol_id2 = iso9660_get_volume_id(&p_obj->pvd);
   strncpy(psz_vol_id, psz_vol_id2, ISO_MAX_VOLUME_ID);
   free(psz_vol_id2);
@@ -1578,7 +1578,7 @@ const char *
 vcdinfo_get_volumeset_id(const vcdinfo_obj_t *p_obj)
 {
   static char volume_set_id[ISO_MAX_VOLUMESET_ID+1] = {'\0'};
-  if ( NULL == p_obj || NULL == &p_obj->pvd ) return (NULL);
+  if ( NULL == p_obj ) return (NULL);
   strncpy(volume_set_id, p_obj->pvd.volume_set_id, ISO_MAX_VOLUMESET_ID);
   return vcdinfo_strip_trail(volume_set_id, ISO_MAX_VOLUMESET_ID);
 }
@@ -1747,10 +1747,10 @@ vcdinfo_visit_lot (vcdinfo_obj_t *p_obj,
 
   ret = vcdinf_visit_lot(&pbc_ctx);
   if (NULL != p_obj->offset_x_list) 
-    _cdio_list_free(p_obj->offset_x_list, true);
+    _cdio_list_free(p_obj->offset_x_list, true, NULL);
   p_obj->offset_x_list = pbc_ctx.offset_x_list;
   if (NULL != p_obj->offset_list) 
-    _cdio_list_free(p_obj->offset_list, true);
+    _cdio_list_free(p_obj->offset_list, true, NULL);
   p_obj->offset_list = pbc_ctx.offset_list;
   return ret;
 }
@@ -2081,9 +2081,9 @@ vcdinfo_close(vcdinfo_obj_t *p_obj)
 {
   if (p_obj != NULL) {
     if (p_obj->offset_list != NULL) 
-      _cdio_list_free(p_obj->offset_list, true);
+      _cdio_list_free(p_obj->offset_list, true, NULL);
     if (p_obj->offset_x_list != NULL) 
-      _cdio_list_free(p_obj->offset_x_list, true);
+      _cdio_list_free(p_obj->offset_x_list, true, NULL);
     free(p_obj->seg_sizes);
     free(p_obj->lot);
     free(p_obj->lot_x);
--- vcdimager-0.7.24/lib/info_private.c.omv~	2017-12-12 18:15:03.703358429 +0100
+++ vcdimager-0.7.24/lib/info_private.c	2017-12-12 18:15:51.309535459 +0100
@@ -110,7 +110,7 @@ vcdinf_update_offset_list(struct _vcdinf
           if (last_lid > max_seen_lid) max_seen_lid=last_lid;
         }
       }
-    _cdio_list_free(unused_lids, true);
+    _cdio_list_free(unused_lids, true, NULL);
   }
 }
 
@@ -136,7 +136,7 @@ vcdinf_visit_lot (struct _vcdinf_pbc_ctx
       ret &= vcdinf_visit_pbc (obj, n + 1, tmp, true);
 
   _vcd_list_sort (obj->extended ? obj->offset_x_list : obj->offset_list, 
-                  (_cdio_list_cmp_func) vcdinf_lid_t_cmp);
+                  (_cdio_list_cmp_func_t) vcdinf_lid_t_cmp);
 
   /* Now really complete the offset table with LIDs.  This routine
      might obviate the need for vcdinf_visit_pbc() or some of it which is
--- vcdimager-0.7.24/lib/mpeg.h.omv~	2017-12-12 18:10:30.158373953 +0100
+++ vcdimager-0.7.24/lib/mpeg.h	2017-12-12 18:10:35.979383558 +0100
@@ -103,7 +103,7 @@ typedef struct {
       unsigned vbvsize;
       bool constrained_flag;
 
-      CdioList *aps_list; /* filled up by vcd_mpeg_source */
+      CdioList_t *aps_list; /* filled up by vcd_mpeg_source */
       double last_aps_pts; /* temp, see ->packet */
       
     } shdr[3];
--- vcdimager-0.7.24/lib/mpeg_stream.c.omv~	2017-12-12 18:25:41.457012359 +0100
+++ vcdimager-0.7.24/lib/mpeg_stream.c	2017-12-12 18:26:15.646043081 +0100
@@ -84,7 +84,7 @@ vcd_mpeg_source_destroy (VcdMpegSource_t
 
   for (i = 0; i < 3; i++)
     if (obj->info.shdr[i].aps_list)
-      _cdio_list_free (obj->info.shdr[i].aps_list, true);
+      _cdio_list_free (obj->info.shdr[i].aps_list, true, NULL);
 
   free (obj);
 }
@@ -270,7 +270,7 @@ vcd_mpeg_source_scan (VcdMpegSource_t *o
 }
 
 static double
-_approx_pts (CdioList *aps_list, uint32_t packet_no)
+_approx_pts (CdioList_t *aps_list, uint32_t packet_no)
 {
   double retval = 0;
   CdioListNode_t *node;
@@ -324,7 +324,7 @@ _set_scan_msf (msf_t *_msf, long lsn)
 
 static void 
 _fix_scan_info (struct vcd_mpeg_scan_data_t *scan_data_ptr,
-                unsigned packet_no, double pts, CdioList *aps_list)
+                unsigned packet_no, double pts, CdioList_t *aps_list)
 {
   CdioListNode_t *node;
   long _next = -1, _prev = -1, _forw = -1, _back = -1;
--- vcdimager-0.7.24/lib/pbc.c.omv~	2017-12-12 18:26:23.985050592 +0100
+++ vcdimager-0.7.24/lib/pbc.c	2017-12-12 18:26:33.134058841 +0100
@@ -848,12 +848,12 @@ vcd_pbc_destroy (pbc_t *p_pbc)
   switch (p_pbc->type)
     {
     case PBC_PLAYLIST:
-      _cdio_list_free (p_pbc->item_id_list, false);
+      _cdio_list_free (p_pbc->item_id_list, false, NULL);
       break;
 
     case PBC_SELECTION:
-      _cdio_list_free (p_pbc->select_id_list, true);
-      _cdio_list_free (p_pbc->select_area_list, true);
+      _cdio_list_free (p_pbc->select_id_list, true, NULL);
+      _cdio_list_free (p_pbc->select_area_list, true, NULL);
       break;
       
     case PBC_END:
--- vcdimager-0.7.24/lib/vcd.c.omv~	2017-12-12 18:17:03.416781997 +0100
+++ vcdimager-0.7.24/lib/vcd.c	2017-12-12 18:19:06.933790772 +0100
@@ -355,7 +355,7 @@ _vcd_obj_remove_mpeg_track (VcdObj_t *p_
   p_vcdobj->relative_end_extent -= length;
 
   /* shift up */
-  _cdio_list_node_free (node, true);
+  _cdio_list_node_free (node, true, NULL);
 }
 
 int
@@ -583,7 +583,7 @@ vcd_obj_add_sequence_pause (VcdObj_t *ob
   }
 
   _vcd_list_sort (p_sequence->pause_list, 
-                  (_cdio_list_cmp_func) _pause_cmp);
+                  (_cdio_list_cmp_func_t) _pause_cmp);
 
   vcd_debug ("added autopause point at %f", pause_time);
 
@@ -623,7 +623,7 @@ vcd_obj_add_segment_pause (VcdObj_t *p_o
   }
 
   _vcd_list_sort (_segment->pause_list, 
-                  (_cdio_list_cmp_func) _pause_cmp);
+                  (_cdio_list_cmp_func_t) _pause_cmp);
 
   vcd_debug ("added autopause point at %f", pause_time);
 
@@ -685,7 +685,7 @@ vcd_obj_add_sequence_entry (VcdObj_t *p_
   }
 
   _vcd_list_sort (p_sequence->entry_list, 
-                  (_cdio_list_cmp_func) _entry_cmp);
+                  (_cdio_list_cmp_func_t) _entry_cmp);
 
   return 0;
 }
@@ -708,13 +708,13 @@ vcd_obj_destroy (VcdObj_t *p_obj)
       free (p->iso_pathname);
     }
 
-  _cdio_list_free (p_obj->custom_file_list, true);
+  _cdio_list_free (p_obj->custom_file_list, true, NULL);
 
-  _cdio_list_free (p_obj->custom_dir_list, true);
+  _cdio_list_free (p_obj->custom_dir_list, true, NULL);
 
   while (_cdio_list_length (p_obj->mpeg_sequence_list))
     _vcd_obj_remove_mpeg_track (p_obj, 0);
-  _cdio_list_free (p_obj->mpeg_sequence_list, true);
+  _cdio_list_free (p_obj->mpeg_sequence_list, true, NULL);
 
   free (p_obj);
 }
@@ -1001,7 +1001,7 @@ vcd_obj_add_dir (VcdObj_t *p_obj, const
   _cdio_list_append (p_obj->custom_dir_list, _iso_pathname);
 
   _vcd_list_sort (p_obj->custom_dir_list, 
-                  (_cdio_list_cmp_func) strcmp);
+                  (_cdio_list_cmp_func_t) strcmp);
 
   return 0;
 }
@@ -2248,7 +2248,7 @@ vcd_obj_end_output (VcdObj_t *p_obj)
   _vcd_salloc_destroy (p_obj->iso_bitmap);
 
   _dict_clean (p_obj);
-  _cdio_list_free (p_obj->buffer_dict_list, true);
+  _cdio_list_free (p_obj->buffer_dict_list, true, NULL);
 }
 
 int
@@ -2290,7 +2290,7 @@ vcd_obj_write_image (VcdObj_t *p_obj, Vc
   /* start with meta info */
 
   {
-    CdioList *p_cue_list;
+    CdioList_t *p_cue_list;
     vcd_cue_t *p_cue;
 
     p_cue_list = _cdio_list_new ();
@@ -2348,7 +2348,7 @@ vcd_obj_write_image (VcdObj_t *p_obj, Vc
 
     vcd_image_sink_set_cuesheet (p_image_sink, p_cue_list);
 
-    _cdio_list_free (p_cue_list, true);
+    _cdio_list_free (p_cue_list, true, NULL);
   }
 
   /* and now for the pay load */
